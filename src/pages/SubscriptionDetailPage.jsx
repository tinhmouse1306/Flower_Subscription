import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
    Package,
    Calendar,
    MapPin,
    Clock,
    CreditCard,
    Gift,
    User,
    Phone,
    Mail,
    CheckCircle,
    XCircle,
    AlertCircle,
    Loader2,
    ArrowLeft
} from 'lucide-react';
import { subscriptionAPI } from '../utils/api';
import { isAuthenticated } from '../utils/auth';
import Swal from 'sweetalert2';

const SubscriptionDetailPage = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [subscription, setSubscription] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    useEffect(() => {
        if (!isAuthenticated()) {
            Swal.fire({
                title: 'C·∫ßn ƒëƒÉng nh·∫≠p!',
                text: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem chi ti·∫øt g√≥i ƒëƒÉng k√Ω!',
                icon: 'info',
                confirmButtonText: 'ƒêƒÉng nh·∫≠p ngay',
                confirmButtonColor: '#8B5CF6'
            }).then(() => {
                navigate('/login');
            });
            return;
        }
    }, [navigate]);

    // Fetch subscription detail
    useEffect(() => {
        const fetchSubscriptionDetail = async () => {
            try {
                setLoading(true);
                setError(null);

                const response = await subscriptionAPI.getSubscriptionDetail(id);
                console.log('üîç Subscription detail response:', response.data);
                setSubscription(response.data);

            } catch (error) {
                console.error('‚ùå Error fetching subscription detail:', error);
                setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.');
            } finally {
                setLoading(false);
            }
        };

        if (id) {
            fetchSubscriptionDetail();
        }
    }, [id]);

    const getStatusIcon = (status) => {
        switch (status) {
            case 'AVAILABLE':
                return <AlertCircle className="w-5 h-5 text-yellow-500" />;
            case 'ACTIVE':
                return <CheckCircle className="w-5 h-5 text-green-500" />;
            case 'SUCCESS':
                return <CheckCircle className="w-5 h-5 text-blue-500" />;
            case 'CANCELLED':
                return <XCircle className="w-5 h-5 text-red-500" />;
            default:
                return <AlertCircle className="w-5 h-5 text-gray-500" />;
        }
    };

    const getStatusText = (status) => {
        switch (status) {
            case 'AVAILABLE':
                return 'Ch∆∞a k√≠ch ho·∫°t';
            case 'ACTIVE':
                return 'ƒê√£ k√≠ch ho·∫°t';
            case 'SUCCESS':
                return 'ƒê√£ giao h√†ng';
            case 'CANCELLED':
                return 'ƒê√£ h·ªßy';
            default:
                return 'Kh√¥ng x√°c ƒë·ªãnh';
        }
    };

    const getStatusColor = (status) => {
        switch (status) {
            case 'AVAILABLE':
                return 'bg-yellow-100 text-yellow-800';
            case 'ACTIVE':
                return 'bg-green-100 text-green-800';
            case 'SUCCESS':
                return 'bg-blue-100 text-blue-800';
            case 'CANCELLED':
                return 'bg-red-100 text-red-800';
            default:
                return 'bg-gray-100 text-gray-800';
        }
    };

    const formatDate = (dateString) => {
        if (!dateString) return 'N/A';
        return new Date(dateString).toLocaleDateString('vi-VN', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    const formatPrice = (price) => {
        if (!price) return 'N/A';
        return price.toLocaleString('vi-VN') + 'ƒë';
    };

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <Loader2 className="animate-spin h-12 w-12 text-primary-500 mx-auto mb-4" />
                    <p className="text-gray-600">ƒêang t·∫£i th√¥ng tin chi ti·∫øt...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <XCircle className="w-16 h-16 text-red-400 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">C√≥ l·ªói x·∫£y ra</h3>
                    <p className="text-gray-600 mb-4">{error}</p>
                    <button
                        onClick={() => navigate('/my-subscriptions')}
                        className="btn-primary"
                    >
                        Quay l·∫°i
                    </button>
                </div>
            </div>
        );
    }

    if (!subscription) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <Package className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">Kh√¥ng t√¨m th·∫•y g√≥i ƒëƒÉng k√Ω</h3>
                    <p className="text-gray-600 mb-4">G√≥i ƒëƒÉng k√Ω n√†y kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.</p>
                    <button
                        onClick={() => navigate('/my-subscriptions')}
                        className="btn-primary"
                    >
                        Quay l·∫°i
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50 py-8">
            <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
                {/* Header */}
                <div className="mb-8">
                    <button
                        onClick={() => navigate('/my-subscriptions')}
                        className="flex items-center text-gray-600 hover:text-gray-900 mb-4"
                    >
                        <ArrowLeft className="w-4 h-4 mr-2" />
                        Quay l·∫°i danh s√°ch g√≥i ƒëƒÉng k√Ω
                    </button>
                    <h1 className="text-3xl font-bold text-gray-900">
                        Chi ti·∫øt g√≥i ƒëƒÉng k√Ω #{subscription.id}
                    </h1>
                </div>

                <div className="grid lg:grid-cols-3 gap-8">
                    {/* Main Content */}
                    <div className="lg:col-span-2 space-y-6">
                        {/* Status Card */}
                        <div className="bg-white rounded-lg shadow-sm p-6">
                            <div className="flex items-center justify-between">
                                <h2 className="text-xl font-semibold text-gray-900">
                                    Tr·∫°ng th√°i g√≥i ƒëƒÉng k√Ω
                                </h2>
                                <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(subscription.status)}`}>
                                    {getStatusIcon(subscription.status)}
                                    <span className="ml-2">{getStatusText(subscription.status)}</span>
                                </span>
                            </div>

                            {/* Status Description */}
                            <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                                {subscription.status === 'AVAILABLE' && (
                                    <p className="text-gray-700">
                                        G√≥i ƒëƒÉng k√Ω c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v√† ƒëang ch·ªù k√≠ch ho·∫°t.
                                        Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t ƒë·ªÉ x√°c nh·∫≠n v√† k√≠ch ho·∫°t g√≥i.
                                    </p>
                                )}
                                {subscription.status === 'ACTIVE' && (
                                    <p className="text-gray-700">
                                        G√≥i ƒëƒÉng k√Ω ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t v√† ƒëang ho·∫°t ƒë·ªông.
                                        Hoa s·∫Ω ƒë∆∞·ª£c giao theo l·ªãch tr√¨nh ƒë√£ ƒëƒÉng k√Ω.
                                    </p>
                                )}
                                {subscription.status === 'SUCCESS' && (
                                    <p className="text-gray-700">
                                        G√≥i ƒëƒÉng k√Ω ƒë√£ ho√†n th√†nh v√† hoa ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng.
                                        C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!
                                    </p>
                                )}
                                {subscription.status === 'CANCELLED' && (
                                    <p className="text-gray-700">
                                        G√≥i ƒëƒÉng k√Ω ƒë√£ b·ªã h·ªßy. N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.
                                    </p>
                                )}
                            </div>
                        </div>

                        {/* Package Information */}
                        <div className="bg-white rounded-lg shadow-sm p-6">
                            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                                <Package className="w-5 h-5 mr-2 text-primary-600" />
                                Th√¥ng tin g√≥i
                            </h2>
                            {subscription.subscriptionPackage && (
                                <div className="grid md:grid-cols-2 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-500">T√™n g√≥i</label>
                                        <p className="text-lg font-semibold text-gray-900">{subscription.subscriptionPackage.name}</p>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-500">M√£ g√≥i</label>
                                        <p className="text-lg font-semibold text-gray-900">#{subscription.subscriptionPackage.packageId}</p>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-500">M√¥ t·∫£</label>
                                        <p className="text-gray-900">{subscription.subscriptionPackage.description}</p>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-500">Gi√°</label>
                                        <p className="text-lg font-semibold text-primary-600">{formatPrice(subscription.price)}</p>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-500">Th·ªùi h·∫°n</label>
                                        <p className="text-gray-900">{subscription.subscriptionPackage.durationMonths} th√°ng</p>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-500">S·ªë l·∫ßn giao/th√°ng</label>
                                        <p className="text-gray-900">{subscription.subscriptionPackage.deliveriesPerMonth} l·∫ßn</p>
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Bouquet Information */}
                        {subscription.bouquet && (
                            <div className="bg-white rounded-lg shadow-sm p-6">
                                <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                                    <Gift className="w-5 h-5 mr-2 text-primary-600" />
                                    Th√¥ng tin b√≥ hoa
                                </h2>
                                <div className="grid md:grid-cols-2 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-500">T√™n b√≥ hoa</label>
                                        <p className="text-lg font-semibold text-gray-900">{subscription.bouquet.name}</p>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-500">M√¥ t·∫£</label>
                                        <p className="text-gray-900">{subscription.bouquet.description}</p>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Delivery Information */}
                        <div className="bg-white rounded-lg shadow-sm p-6">
                            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                                <MapPin className="w-5 h-5 mr-2 text-primary-600" />
                                Th√¥ng tin giao h√†ng
                            </h2>
                            <div className="grid md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-500">Ng√†y giao h√†ng</label>
                                    <p className="text-gray-900">{formatDate(subscription.deliveryDate)}</p>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-500">Ph∆∞∆°ng th·ª©c thanh to√°n</label>
                                    <p className="text-gray-900">{subscription.paymentMethod}</p>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-500">Ng√†y t·∫°o</label>
                                    <p className="text-gray-900">{formatDate(subscription.createdAt)}</p>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-500">C·∫≠p nh·∫≠t l·∫ßn cu·ªëi</label>
                                    <p className="text-gray-900">{formatDate(subscription.updatedAt)}</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Sidebar */}
                    <div className="lg:col-span-1">
                        <div className="bg-white rounded-lg shadow-sm p-6 sticky top-8">
                            <h3 className="text-lg font-semibold text-gray-900 mb-4">T√≥m t·∫Øt</h3>

                            <div className="space-y-3">
                                <div className="flex justify-between">
                                    <span className="text-gray-600">M√£ ƒëƒÉng k√Ω:</span>
                                    <span className="font-semibold">#{subscription.id}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-600">Tr·∫°ng th√°i:</span>
                                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(subscription.status)}`}>
                                        {getStatusText(subscription.status)}
                                    </span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-600">Gi√° g√≥i:</span>
                                    <span className="font-semibold text-primary-600">{formatPrice(subscription.price)}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-600">Ng√†y t·∫°o:</span>
                                    <span className="font-semibold">{formatDate(subscription.createdAt)}</span>
                                </div>
                            </div>

                            <div className="mt-6 pt-6 border-t">
                                <button
                                    onClick={() => navigate('/my-subscriptions')}
                                    className="w-full btn-secondary"
                                >
                                    Quay l·∫°i danh s√°ch
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default SubscriptionDetailPage;
